#+seq_todo: TODO DRAFT DONE

* Repeating Commands

A loop in Java is a way of repeating a sequence of commands without having to type it out multiple times. For example, if I wanted to print "tick" 5 times, I could do the following:

#+begin_src java
System.out.println("tick");
System.out.println("tick");
System.out.println("tick");
System.out.println("tick");
System.out.println("tick");
#+end_src

Of course, I don't want to do that. What if I wanted to do it 100 times instead? Or 1000?[fn:times] Copy/pasting the line repeatedly would not be very fun at all. You might almost want to... /write a program to do it for you!/

* Enter the =for= loop.

#+begin_src java
// Lets print "tick" 5 times!
for (int i = 0; i < 5; i++) {
  System.out.println("tick");
}
#+end_src

We immediately recognize ~int i = 0;~ as a way of defining a new integer variable with the value 0. ~i < 5~ is our /condition/, and ~i++~ tells us how we get from our starting state to our /condition/.

- The loop variable 'governs' our loop. In this case, our variable is =i=.
- ~initializer~ sets the starting value for the loop variable. Here, our initializer is ~int i = 0;~.
- ~condition~ tells us whether we should continue executing the loop. We plan to stop at =i > 5= in this loop.
- ~update~ tells us how the variable should change at the end of each /iteration/. We are increasing the value of =i= by =1= using =i++=.
Lets break this loop down a little bit.

#+begin_src java
// We could use an integer that already exists, if we wanted to!
int i = 0;
for (; i < 5; i++) {
    System.out.println("tick");
}
#+end_src

What if I want to go backwards?

#+begin_src java
int i = 5;
for (; i > 0; i--) {
    System.out.println("kcit");
}
#+end_src

What if you have /oudenophobia/[fn:ouden] and really want to avoid using the number =0= in your code?

#+begin_src java
// we don't have to start at 0!
int i = 3214;
for (; i < 3219; i++) {
    System.out.println("tick");
}
#+end_src

Wait... how does that work? 3219 has nothing to do with 5. Or does it?[fn:spurious] If you read the footnote at this point, you'll know that 3219-3214=5, which is vital information for relating the above =for= loop to the number 5.

Ok. So we are starting with some value for =i= and we are stopping when the /condition/ is no longer true. In the cases we've been looking at so far, the /condition/

So what if I wanted to do that 100 times now? Do I just repeat that for loop (/counts quietly for a second/) 20 times? No. Of course not. We just change the value that =i= is counting up to.

#+CAPTION: A for loop, broken down. Credits: Prof Kazakova.
#+NAME: fig:forloop1
[[file:../../static/img/forloop1.png]]

#+begin_verse
Steps:
0. Create an integer called =i= and set its value to =0=.
1. Check if =i < limit=. If it is, continue to 2. If not, exit the loop.
2. Execute the =body= of the loop. tick.
3. update =i=. Here, we are adding 1 to i.
1. check if =i < limit=. If it is, continue to 2. If not, exit the loop.
#+end_verse

Between the /initializer/ and the /condition/ we are defining a range of values for =i= to fall into. The /update/ tells us how =i= will move through that range. One way to think about for loops is to draw a number line with the initial value of your loop variable, or the /start/, and the value implied by your condition, or the /finish/. You can then count how many times you would have to use the update function to get from the /start/ to the /finish/. Relate that back to the counting exercises we did when we started clicker questions on for loops.

* Techniques
** Triangle
** Mirroring

[fn:times] I am fully aware that a program that just says "tick" 1000 times is neither exciting to a user nor your goal as a programmer.
[fn:ouden] /ouden/ is Greek for nothing, or literally, /not one/.
[fn:spurious] Very related to 5 in this context. 3219-3214=5.
